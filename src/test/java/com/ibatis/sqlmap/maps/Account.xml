<?xml version="1.0" encoding="UTF-8" ?>
<!--

       Copyright 2009-2012 The MyBatis Team

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->

<!DOCTYPE sqlMap
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="Account">

  <typeAlias alias="account" type="com.testdomain.Account"/>
  <typeAlias alias="Long" type="java.lang.Long"/>
  <typeAlias alias="HundredsBool" type="com.ibatis.sqlmap.extensions.HundredsTypeHandlerCallback"/>

  <cacheModel id="account-cache" type="LRU" readOnly="true">
    <flushInterval hours="24"/>
    <flushOnExecute statement="updateAccountViaInlineParameters"/>
    <property name="size" value="1"/>
  </cacheModel>

  <cacheModel id="rw-account-cache" type="FIFO" serialize="true" readOnly="false">
    <flushInterval hours="24"/>
    <flushOnExecute statement="updateAccountViaInlineParameters"/>
  </cacheModel>

  <resultMap id="cached-account-result" class="account">
    <result property="id" column="ACC_ID"/>
    <result property="firstName" column="ACC_FIRST_NAME"/>
    <result property="lastName" column="ACC_LAST_NAME"/>
    <result property="emailAddress" column="ACC_EMAIL"/>
  </resultMap>

  <resultMap id="broken-account-result" class="account">
    <result property="id" javaType="java.lang.Integer" jdbcType="INTEGER" column="ACC_ID"/>
    <result property="firstName" javaType="java.lang.String" jdbcType="VARCHAR" column="ACC_FIRST_NAME"/>
    <result property="lastName" javaType="java.lang.String" jdbcType="VARCHAR" column="ACC_LAST_NAME"/>
    <result property="emailAddress" javaType="java.lang.String" jdbcType="VARCHAR" column="ACC_EMAIL"/>
    <result property="age" javaType="Long" jdbcType="NUMERIC" column="ACC_AGE"/>
    <result property="dateAdded" javaType="java.util.Date" jdbcType="DATE" column="ACC_DATE_ADDED"/>
  </resultMap>

  <resultMap id="account-result-nullable-email" class="account">
    <result property="id" jdbcType="NUMERIC" column="ACC_ID"/>
    <result property="firstName" jdbcType="VARCHAR" column="ACC_FIRST_NAME"/>
    <result property="lastName" jdbcType="VARCHAR" column="ACC_LAST_NAME"/>
    <result property="emailAddress" jdbcType="VARCHAR" column="ACC_EMAIL"/>
  </resultMap>

  <resultMap id="account-result" class="account">
    <result property="id" jdbcType="NUMERIC" column="ACC_ID"/>
    <result property="firstName" jdbcType="VARCHAR" column="ACC_FIRST_NAME"/>
    <result property="lastName" jdbcType="VARCHAR" column="ACC_LAST_NAME"/>
    <result property="emailAddress" jdbcType="VARCHAR" column="ACC_EMAIL"/>
    <result property="bannerOption" column="ACC_BANNER_OPTION" jdbcType="VARCHAR" javaType="boolean"/>
    <result property="cartOption" column="ACC_CART_OPTION" typeHandler="HundredsBool"/>
  </resultMap>

  <resultMap id="account-custom-result" class="account">
    <result property="id" jdbcType="NUMERIC" column="ACC_ID"/>
    <result property="firstName" jdbcType="VARCHAR" column="ACC_FIRST_NAME"/>
    <result property="lastName" jdbcType="VARCHAR" column="ACC_LAST_NAME"/>
    <result property="emailAddress" jdbcType="VARCHAR" column="ACC_EMAIL"/>
    <result property="bannerOption" javaType="boolean" jdbcType="VARCHAR" column="ACC_BANNER_OPTION"/>
    <result property="cartOption" column="ACC_CART_OPTION" typeHandler="HundredsBool"/>
  </resultMap>

  <resultMap id="nested-account-result" class="account">
    <result property="id" jdbcType="NUMERIC" column="ACC_ID"/>
    <result property="firstName" jdbcType="VARCHAR" column="ACC_FIRST_NAME"/>
    <result property="lastName" jdbcType="VARCHAR" column="ACC_LAST_NAME"/>
    <result property="emailAddress" jdbcType="VARCHAR" column="ACC_EMAIL"/>
    <result property="account.account" column="ACC_ID" select="getAccountViaColumnName"/>
  </resultMap>

  <resultMap id="indexed-account-result" class="account">
    <result property="id" column="ACC_ID"/>
    <result property="firstName" column="ACC_FIRST_NAME"/>
    <result property="lastName" column="ACC_LAST_NAME"/>
    <result property="emailAddress" column="ACC_EMAIL"/>
  </resultMap>

  <resultMap id="account-hashmap-result" class="java.util.HashMap">
    <result property="id" column="ACC_ID"/>
    <result property="firstName" column="ACC_FIRST_NAME"/>
    <result property="lastName" column="ACC_LAST_NAME"/>
    <result property="emailAddress" column="ACC_EMAIL"/>
  </resultMap>

  <resultMap id="email-result" class="java.lang.String">
    <result property="value" column="ACC_EMAIL"/>
  </resultMap>

  <select id="getEmailAddressViaResultClass"
          parameterClass="java.lang.Integer"
          resultClass="java.lang.String">
    select ACC_EMAIL as value
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getEmailAddressViaResultMap"
          parameterClass="java.lang.Integer"
          resultMap="email-result">
    select ACC_EMAIL
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getDynamicOrderedEmailAddressesViaResultMap"
          resultMap="email-result">
    select ACC_EMAIL
    from ACCOUNT
    ORDER BY $value$
  </select>


  <select id="getAllEmailAddressesViaResultClass"
          resultClass="java.lang.String">
    select ACC_EMAIL as value
    from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAllEmailAddressesViaResultMap"
          resultMap="email-result">
    select ACC_EMAIL
    from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAccountViaResultClass"
          parameterClass="java.lang.Integer"
          resultClass="account">
    <![CDATA[
    select
      ACC_ID as id,
      ACC_FIRST_NAME as firstName,
      ACC_LAST_NAME as lastName,
      ACC_EMAIL as emailAddress
    from ACCOUNT
    where ACC_ID = #value#
    and ACC_ID = #value#
    ]]>
  </select>
  <select id="getAccountViaResultClassIgnoreCaseTypeAlias"
          parameterClass="java.lang.Integer"
          resultClass="AcCoUnT">
    <![CDATA[
    select
      ACC_ID as id,
      ACC_FIRST_NAME as firstName,
      ACC_LAST_NAME as lastName,
      ACC_EMAIL as emailAddress
    from ACCOUNT
    where ACC_ID = #value#
    and ACC_ID = #value#
    ]]>
  </select>
  <!--parameterClass="java.math.BigDecimal"-->
  <select id="getAccountViaResultClassPlusOne"
          resultClass="account">
    <![CDATA[
    select
      ACC_ID as id,
      ACC_FIRST_NAME as firstName,
      ACC_LAST_NAME as lastName,
      ACC_EMAIL as emailAddress
    from ACCOUNT
    where ACC_ID IN (#value#,#value#+1)
    ]]>
  </select>

  <select id="getAccountViaColumnName"
          parameterClass="java.lang.Integer"
          resultMap="account-result">
    select
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL,
    ACC_BANNER_OPTION,
    ACC_CART_OPTION
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getNestedAccountViaColumnName"
          parameterClass="java.lang.Integer"
          resultMap="nested-account-result">
    select
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getSuperAccount"
          parameterClass="com.testdomain.SuperAccount"
          resultClass="com.testdomain.SuperAccount">
    select
    ACC_ID as id,
    ACC_FIRST_NAME as firstName,
    ACC_LAST_NAME as lastName,
    ACC_EMAIL as emailAddress
    from ACCOUNT
    where ACC_ID = #id#
  </select>

  <select id="getAccountNullableEmail"
          parameterClass="java.lang.Integer"
          resultMap="account-result-nullable-email">
    select
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getAccountViaColumnIndex"
          parameterClass="java.lang.Integer"
          resultMap="indexed-account-result">
    select
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getAccountAsHashMap"
          parameterClass="java.lang.Integer"
          resultMap="account-hashmap-result">
    select *
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getAccountAsHashMapResultClass"
          parameterClass="java.lang.Integer"
          resultClass="java.util.HashMap">
    select
    ACC_ID as id,
    ACC_FIRST_NAME as firstName,
    ACC_LAST_NAME as lastName,
    ACC_EMAIL as emailAddress
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getAllAccountsViaResultMap"
          resultMap="account-result">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAllAccountsViaCustomTypeHandler"
          resultMap="account-custom-result">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getBrokenAllAccountsViaResultMap"
          resultMap="broken-account-result">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getNoAccountsViaResultMap"
          resultMap="account-result">
    select * from ACCOUNT
    where ACC_ID > 1000
    order by ACC_ID
  </select>

  <select id="getFewAccountsViaResultMap"
          resultMap="account-result">
    <![CDATA[
    select * from ACCOUNT
    where ACC_ID < 2
    order by ACC_ID
    ]]>
  </select>

  <select id="getAllAccountsViaResultMapWithDynamicElement"
          resultMap="account-result">
    select * from ACCOUNT
    where ACC_EMAIL $value$ '%@%'
    order by ACC_ID
  </select>


  <select id="getCachedAccountsViaResultMap"
          resultMap="account-result"
          cacheModel="account-cache">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getRWCachedAccountsViaResultMap"
          resultMap="account-result"
          cacheModel="rw-account-cache">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAllAccountsViaResultClass"
          resultClass="account">
    select
    ACC_ID as id,
    ACC_FIRST_NAME as firstName,
    ACC_LAST_NAME as lastName,
    ACC_EMAIL as emailAddress
    from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAllAccountsAsHashMapViaResultMap"
          resultMap="account-hashmap-result">
    select * from ACCOUNT
    order by ACC_ID
  </select>

  <select id="getAllAccountsAsHashMapViaResultClass"
          resultClass="java.util.HashMap">
    select
    ACC_ID as id,
    ACC_FIRST_NAME as firstName,
    ACC_LAST_NAME as lastName,
    ACC_EMAIL as emailAddress
    from ACCOUNT
    order by ACC_ID
  </select>

  <delete id="deleteAccount"
          parameterClass="account">
    delete from ACCOUNT
    where ACC_ID = #id#
    and ACC_ID = #id#
  </delete>

  <delete id="deleteAccountByDuplicateInteger">
    delete from ACCOUNT
    where ACC_ID = #value#
    and ACC_ID = #value#
  </delete>


  <update id="updateAccountViaInlineParameters"
          parameterClass="account">
    update ACCOUNT set
    ACC_FIRST_NAME = #firstName#,
    ACC_LAST_NAME = #lastName#,
    ACC_EMAIL = #emailAddress,javaType=string,jdbcType=VARCHAR#
    where
    ACC_ID = #id#
  </update>

  <parameterMap id="insert-params" class="account">
    <parameter property="id"/>
    <parameter property="firstName"/>
    <parameter property="lastName"/>
    <parameter property="emailAddress" jdbcType="VARCHAR"/>
    <parameter property="bannerOption" jdbcType="VARCHAR" javaType="boolean"/>
    <parameter property="cartOption" jdbcType="NUMERIC" javaType="boolean" typeHandler="HundredsBool"/>
  </parameterMap>

  <insert id="insertAccountViaParameterMap"
          parameterMap="insert-params">
    insert into ACCOUNT (
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL,
    ACC_BANNER_OPTION,
    ACC_CART_OPTION)
    values (
    ?, ?, ?, ?, ?, ?
    )
  </insert>

  <insert id="insertAccountViaInlineParameters"
          parameterClass="account"
      >
    insert into ACCOUNT (
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL)
    values (
    #id:NUMERIC#,
    #firstName:VARCHAR#,
    #lastName:VARCHAR#,
    #emailAddress:VARCHAR#
    )
  </insert>

  <insert id="insertAccountViaInlineParametersWithDynamic"
          parameterClass="account"
      >
    insert into ACCOUNT (
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL)
    values (
    #id:NUMERIC#,
    #firstName#,
    #lastName#,
    #emailAddress:VARCHAR#
    <dynamic prepend="">
      <isNotEmpty property="emailAddress">
        )
      </isNotEmpty>
    </dynamic>
  </insert>

  <insert id="insertAccountNullableEmail"
          parameterClass="account"
      >
    insert into ACCOUNT (
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL)
    values (
    #id#,
    #firstName#,
    #lastName#,
    #emailAddress:VARCHAR#
    )
  </insert>

  <insert id="insertAccountUknownParameterClass">
    insert into ACCOUNT (
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL)
    values (
    #id#,
    #firstName#,
    #lastName#,
    #emailAddress:VARCHAR#
    )
  </insert>

  <select id="getAccountNullParameter"
          resultMap="account-result">
    select
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL,
    ACC_BANNER_OPTION,
    ACC_CART_OPTION
    from ACCOUNT
    where ACC_ID = #value,jdbcType=NUMERIC#
  </select>


  <insert id="insertAccountFromFields"
          parameterClass="com.testdomain.FieldAccount"
      >
    insert into ACCOUNT (
    ACC_ID,
    ACC_FIRST_NAME,
    ACC_LAST_NAME,
    ACC_EMAIL)
    values (
    #id#,
    #firstName#,
    #lastName#,
    #emailAddress:VARCHAR#
    )
  </insert>

  <select id="getAccountToFields"
          parameterClass="int"
          resultClass="com.testdomain.FieldAccount">
    select
    ACC_ID as "id",
    ACC_FIRST_NAME as "firstName",
    ACC_LAST_NAME as "lastName",
    ACC_EMAIL as "emailAddress",
    ACC_ID as "account.id",
    ACC_FIRST_NAME as "account.firstName",
    ACC_LAST_NAME as "account.lastName",
    ACC_EMAIL as "account.emailAddress"
    from ACCOUNT
    where ACC_ID = #value#
  </select>

  <select id="getAccountWithPrivateConstructor"
          parameterClass="int"
          resultClass="com.testdomain.PrivateAccount">
    select
    ACC_ID as "id",
    ACC_FIRST_NAME as "firstName",
    ACC_LAST_NAME as "lastName",
    ACC_EMAIL as "emailAddress",
    ACC_ID as "account.id",
    ACC_FIRST_NAME as "account.firstName",
    ACC_LAST_NAME as "account.lastName",
    ACC_EMAIL as "account.emailAddress"
    from ACCOUNT
    where ACC_ID = #value#
  </select>

</sqlMap>